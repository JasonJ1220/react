function Square(props) {
  return (
    <button
      className="square"
      onClick={() => props.handleClick(props.id, props.value)}
    >
      {props.value}
    </button>
  );
}

class Board extends React.Component {
  calculateWinner(squares) {
    const lines = [
      [0, 1, 2],
      [3, 4, 5],
      [6, 7, 8],
      [0, 3, 6],
      [1, 4, 7],
      [2, 5, 8],
      [0, 4, 8],
      [2, 4, 6]
    ];
    for (let i = 0; i < lines.length; i++) {
      const [a, b, c] = lines[i];
      if (
        squares[a] &&
        squares[a] === squares[b] &&
        squares[a] === squares[c]
      ) {
        return squares[a];
      }
    }
    return null;
  }

  render() {
    let winner = this.calculateWinner(this.props.squares),
      squareList = this.props.squares.map((item, index) => (
        <Square
          key={index}
          id={index}
          value={item}
          handleClick={this.props.clickSquare}
        />
      ));
    let status;
    if (winner) {
      status = "Winner: " + winner;
    } else {
      status = "Next player: " + (this.props.xIsNext ? "X" : "O");
    }
    return (
      <div>
        <div className="status">{status}</div>

        <div className="board">{squareList}</div>
      </div>
    );
  }
}

class Game extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      history: [
        {
          squares: Array(9).fill(null)
        }
      ],
      xIsNext: true,
      stepNumber:0
    };
  }

  clickSquare(id, value) {
    if (value === null) {
      const current = this.state.history[this.state.stepNumber];
      console.log(this.state.stepNumber);
      let squares = current.squares.concat();
      squares[id] = this.state.xIsNext ? "X" : "O";
      this.setState({
        history: this.state.history.concat([{ squares: squares }]),
        xIsNext: !this.state.xIsNext,
        stepNumber:++this.state.stepNumber
      });
      console.log(this.state.history);
    }
  }

  jumpTo(step) {
    this.setState({
      stepNumber: step,
      xIsNext: step % 2 === 0,
      history:this.state.history.slice(0,step+1)
    });
  }

  render() {
    const history = this.state.history;
    const current = history[this.state.stepNumber];
    //const winner = calculateWinner(current.squares);
    
    const moves = history.map((step, move) => {
      const desc = move ? "Go to move #" + move : "Go to game start";
      return (
        <li key={move}>
          <button onClick={() => this.jumpTo(move)}>{desc}</button>
        </li>
      );
    });

    return (
      <div className="game">
        <div className="game-board">
          <Board
            clickSquare={this.clickSquare.bind(this)}
            squares={current.squares}
          />
        </div>
        <div className="game-info">
          <div>{/* status */}</div>
          <ol>{moves}</ol>
        </div>
      </div>
    );
  }
}

ReactDOM.render(<Game />, document.getElementById("root"));
